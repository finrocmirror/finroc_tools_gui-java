/**
 * You received this file as part of FinGUI - a universal
 * (Web-)GUI editor for Robotic Systems.
 *
 * Copyright (C) 2007-2010 Max Reichardt
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.finroc.tools.gui.abstractbase;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.LayoutManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.finroc.tools.gui.commons.EventRouter;

/**
 * @author max
 *
 */
public abstract class UIBase < P extends UIBase <? , ? , ? , ? >, U extends Container, M extends DataModelBase <? , ? , ? >, C extends UIBase <? , ? , ? , ? >> implements DataModelListener, Iterable<C> {

    /** model */
    protected M model;

    /** JComponent to display UI */
    protected U ui;

    /** Child UI-Components */
    protected List<C> children = new ArrayList<C>();

    /** Parent UI-Component */
    protected P parent;

    private boolean initialized = false;

    public UIBase(P parent, U ui, M model) {
        this.ui = ui;
        this.parent = parent;
        setModel(model);
        initialized = true;
    }

    public P getParent() {
        return parent;
    }

    public void setParent(P parent) {
        this.parent = parent;
    }

    public M getModel() {
        return model;
    }

    public void setModel(M newModel) {
        if (model == newModel) {
            return;
        }
        if (model != null) {
            model.removeDataModelListener(this);
        }
        model = newModel;
        if (newModel != null) {
            model.addDataModelListener(this);
        }
        if (initialized) {
            dataModelChanged(model, Event.CompleteChange, model);
        }
    }

    /**
     * Called when object is deleted
     */
    public void dispose() {
        for (C child : children) {
            child.dispose();
        }
        children = null;
        setModel(null);
        if (ui != null) {
            ui.setVisible(false);
            if (ui.getParent() != null) {
                ui.getParent().remove(ui);
            }
            ui.removeAll();
            ui = null;
        }
        EventRouter.objectDisposed(this);
    }

    /**
     * Get Child by it's data model
     *
     * @param childModel Child's data model
     * @return Child
     */
    public C getChild(DataModelBase <? , ? , ? > childModel) {
        for (C child : children) {
            if (child.getModel() == childModel) {
                return child;
            }
        }
        return null;
    }

    public C getChild(Container ui) {
        for (C child : children) {
            if (child.asComponent() == ui) {
                return child;
            }
        }
        return null;
    }

    public void repaint(Rectangle r) {
        repaint(r.x, r.y, r.width, r.height);
    }

    public U asComponent() {
        return ui;
    }

    /**
     * Remove all children(UI) whose model isn't in the current model anymore.
     *
     * @return Remove children
     */
    public void removeObsoleteUIs() {
        for (Iterator<C> it = children.iterator(); it.hasNext();) {
            C temp = it.next();
            if (!model.getChildren().contains(temp.getModel())) {
                temp.dispose();
                it.remove();
            }
        }
    }

    public Iterator<C> iterator() {
        return children.iterator();
    }

    public void dataModelChanged(DataModelBase <? , ? , ? > caller, DataModelListener.Event event, Object param) {
    }


    // generated by Eclipse...
    public void repaint() {
        ui.repaint();
    }

    public void addKeyListener(KeyListener l) {
        ui.addKeyListener(l);
    }

    public void addMouseListener(MouseListener l) {
        ui.addMouseListener(l);
    }

    public void addMouseMotionListener(MouseMotionListener l) {
        ui.addMouseMotionListener(l);
    }

    public void addMouseWheelListener(MouseWheelListener l) {
        ui.addMouseWheelListener(l);
    }

    public Component[] getComponents() {
        return ui.getComponents();
    }

    public void removeKeyListener(KeyListener l) {
        ui.removeKeyListener(l);
    }

    public void removeMouseListener(MouseListener l) {
        ui.removeMouseListener(l);
    }

    public void removeMouseMotionListener(MouseMotionListener l) {
        ui.removeMouseMotionListener(l);
    }

    public void removeMouseWheelListener(MouseWheelListener l) {
        ui.removeMouseWheelListener(l);
    }

    public void repaint(int x, int y, int width, int height) {
        ui.repaint(x, y, width, height);
    }

    public void repaint(long tm, int x, int y, int width, int height) {
        ui.repaint(tm, x, y, width, height);
    }

    public void repaint(long tm) {
        ui.repaint(tm);
    }

    public void requestFocus() {
        ui.requestFocus();
    }

    public void setBackground(Color c) {
        ui.setBackground(c);
    }

    public void setBounds(int x, int y, int width, int height) {
        ui.setBounds(x, y, width, height);
    }

    public void setBounds(Rectangle r) {
        ui.setBounds(r);
    }

    public void setCursor(Cursor cursor) {
        ui.setCursor(cursor);
    }

    public void setFocusTraversalKeysEnabled(boolean focusTraversalKeysEnabled) {
        ui.setFocusTraversalKeysEnabled(focusTraversalKeysEnabled);
    }

    public void setLayout(LayoutManager mgr) {
        ui.setLayout(mgr);
    }

    public void setLocation(int x, int y) {
        ui.setLocation(x, y);
    }

    public void setLocation(Point p) {
        ui.setLocation(p);
    }

    public void setMaximumSize(Dimension maximumSize) {
        ui.setMaximumSize(maximumSize);
    }

    public void setMinimumSize(Dimension minimumSize) {
        ui.setMinimumSize(minimumSize);
    }

    public void setPreferredSize(Dimension preferredSize) {
        ui.setPreferredSize(preferredSize);
    }

    public void setSize(Dimension d) {
        ui.setSize(d);
    }

    public void setSize(int width, int height) {
        ui.setSize(width, height);
    }

    public void setVisible(boolean b) {
        ui.setVisible(b);
    }

    public void validate() {
        ui.validate();
    }
}
